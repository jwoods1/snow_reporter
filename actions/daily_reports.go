package actions

import (

  "fmt"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "snow_watch/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (DailyReport)
// DB Table: Plural (daily_reports)
// Resource: Plural (DailyReports)
// Path: Plural (/daily_reports)
// View Template Folder: Plural (/templates/daily_reports/)

// DailyReportsResource is the resource for the DailyReport model
type DailyReportsResource struct{
  buffalo.Resource
}

// List gets all DailyReports. This function is mapped to the path
// GET /daily_reports
func (v DailyReportsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  dailyReports := &models.DailyReports{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all DailyReports from the DB
  if err := q.All(dailyReports); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.Auto(c, dailyReports))
}

// Show gets the data for one DailyReport. This function is mapped to
// the path GET /daily_reports/{daily_report_id}
func (v DailyReportsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty DailyReport
  dailyReport := &models.DailyReport{}

  // To find the DailyReport the parameter daily_report_id is used.
  if err := tx.Find(dailyReport, c.Param("daily_report_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, dailyReport))
}

// New renders the form for creating a new DailyReport.
// This function is mapped to the path GET /daily_reports/new
func (v DailyReportsResource) New(c buffalo.Context) error {
  return c.Render(200, r.Auto(c, &models.DailyReport{}))
}
// Create adds a DailyReport to the DB. This function is mapped to the
// path POST /daily_reports
func (v DailyReportsResource) Create(c buffalo.Context) error {
  // Allocate an empty DailyReport
  dailyReport := &models.DailyReport{}

  // Bind dailyReport to the html form elements
  if err := c.Bind(dailyReport); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(dailyReport)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, dailyReport))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "dailyReport.created.success"))
  // and redirect to the daily_reports index page
  return c.Render(201, r.Auto(c, dailyReport))
}

// Edit renders a edit form for a DailyReport. This function is
// mapped to the path GET /daily_reports/{daily_report_id}/edit
func (v DailyReportsResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty DailyReport
  dailyReport := &models.DailyReport{}

  if err := tx.Find(dailyReport, c.Param("daily_report_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, dailyReport))
}
// Update changes a DailyReport in the DB. This function is mapped to
// the path PUT /daily_reports/{daily_report_id}
func (v DailyReportsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty DailyReport
  dailyReport := &models.DailyReport{}

  if err := tx.Find(dailyReport, c.Param("daily_report_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind DailyReport to the html form elements
  if err := c.Bind(dailyReport); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(dailyReport)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, dailyReport))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "dailyReport.updated.success"))
  // and redirect to the daily_reports index page
  return c.Render(200, r.Auto(c, dailyReport))
}

// Destroy deletes a DailyReport from the DB. This function is mapped
// to the path DELETE /daily_reports/{daily_report_id}
func (v DailyReportsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty DailyReport
  dailyReport := &models.DailyReport{}

  // To find the DailyReport the parameter daily_report_id is used.
  if err := tx.Find(dailyReport, c.Param("daily_report_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy(dailyReport); err != nil {
    return err
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", T.Translate(c, "dailyReport.destroyed.success"))
  // Redirect to the daily_reports index page
  return c.Render(200, r.Auto(c, dailyReport))
}
